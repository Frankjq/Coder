Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]

/*
backTrack
*/


class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> res = new ArrayList<>();
        backTrack(res, "", 0, 0, n);
        return res;
    }
    
    public void backTrack(List<String> res, String str, int left, int right, int num){
        if(str.length()/2 ==  num){
            res.add(str);
            return;
        }
        if(left < num){
   
            backTrack(res, str + "(", left +1, right, num);
        }
        if(right < left){
            backTrack(res, str + ")", left, right + 1, num);
        }
        
    }
}

A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. 
The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).



/*
OPT(i,j) = OPT(i-1,j)+OPT(i,j-1)
*/

class Solution {
    public int uniquePaths(int m, int n) {
        int [][]dp   = new int [m][n];
        for(int i = 0 ; i < m ; i++){
            dp[i][0] = 1;
        }
        for(int i = 0 ; i < n ; i++){
            dp[0][i] = 1;
        }
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n ; j++){
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }
        
        return dp[m-1][n-1];
    }
}



A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. 
The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

add obstacles


/*
OPT(i,j) = OPT(i-1,j) + OPT(i,j-1)  when grid(i,j) = 0
OPT(i,j) = 0                        when grid(i,j) = 1
*/


class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int [][]dp = new int [m][n];
        for(int i = 0; i< m; i++){
            if(obstacleGrid[i][0] != 0){
                break;
            }
            dp[i][0] = 1;
        }
        
        for(int i = 0; i< n; i++){
            if(obstacleGrid[0][i] != 0){
                break;
            }
            dp[0][i] = 1;
        }
        
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                if(obstacleGrid[i][j] == 0){
                    dp[i][j] = dp[i-1][j] + dp[i][j-1];
                }else{
                    dp[i][j] = 0;
                }
            }
        }
        return dp[m-1][n-1];
    }
}

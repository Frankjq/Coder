Given a square array of integers A, we want the minimum sum of a falling path through A.

A falling path starts at any element in the first row, and chooses one element from each row.  
The next row's choice must be in a column that is different from the previous row's column by at most one.


Example 1:

Input: [[1,2,3],[4,5,6],[7,8,9]]
Output: 12

/*
OPT(i,j) = a(i,j) + min(OPT(i-1,j-1), OPT(i-1,j), OPT(i-1,j+1))
*/


class Solution {
    public int minFallingPathSum(int[][] A) {
        int len = A.length;
        if(len==1) return A[0][0];
        int dp[][] = new int [len][len];
        
        for(int i = 0; i< len; i++){
            dp[0][i] = A[0][i];
        }
        for(int i = 1; i < len; i++){
            for(int j = 0; j < len; j++){
                    dp[i][j] = A[i][j] + Math.min(Math.min(dp[i-1][Math.max(0,j-1)], dp[i-1][j]), dp[i-1][Math.min(len-1,j+1)]);
                
            }
        }
        int min = dp[len-1][0];
        for(int x : dp[len-1]){
            min = Math.min(x, min);
        }
        return min;
        
    }
}

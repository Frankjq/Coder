Given an array A of integers, return the length of the longest arithmetic subsequence in A.

Recall that a subsequence of A is a list A[i_1], A[i_2], ..., A[i_k] with 0 <= i_1 < i_2 < ... < i_k <= A.length - 1, and that a sequence B is arithmetic if B[i+1] - B[i] are all the same value (for 0 <= i < B.length - 1).

 

Example 1:

Input: [3,6,9,12]
Output: 4
Explanation: 
The whole array is an arithmetic sequence with steps of length = 3.
Example 2:

Input: [9,4,7,2,10]
Output: 3
Explanation: 
The longest arithmetic subsequence is [4,7,10].
Example 3:

Input: [20,1,15,3,10,5,8]
Output: 4
Explanation: 
The longest arithmetic subsequence is [20,15,10,5].
 

Note:

2 <= A.length <= 2000
0 <= A[i] <= 10000


normal->  DP

/*
dp[index] = S<diff, maxlength>
*/

class Solution {
    public int longestArithSeqLength(int[] A) {
        HashMap<Integer, Integer> []dp = new HashMap [A.length];
        
        int res = 2;
        
        for(int i = 0; i < A.length; i++){
            dp[i] = new HashMap<> ();
            
            for(int j = 0; j < i; j++){
                int diff = A[i] - A[j];
                int len = 2;
                
                if(dp[j].containsKey(diff)){
                    dp[i].put(diff, dp[j].get(diff) + 1);
                }else{
                    dp[i].put(diff, len );
                }
                res = Math.max(dp[i].get(diff), res);
            }
        }
        
        
        return res;
    }
}


from math
looking for same difference and count times
total 10000 -> -10000 <= diff <= 10000 ->> total 20001 

class Solution {
    public int longestArithSeqLength(int[] A) {
        int N = A.length;
        int[][] dp = new int[N][N];
        int[] positions = new int[20000];
        Arrays.fill(positions, -1);
        int max = 0;
        for(int i = 0; i < N; i++){
            for(int j = i + 1; j < N; j++){
                int prev = A[i] - (A[j] - A[i]);
                if(prev < 0 || positions[prev] == -1) continue;
                dp[i][j] = dp[positions[prev]][i] + 1;
                max = Math.max(max, dp[i][j]);
            }
            positions[A[i]] = i;
        }
        return max + 2;
    }
}

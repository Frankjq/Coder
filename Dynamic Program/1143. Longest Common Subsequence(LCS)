Given two strings text1 and text2, return the length of their longest common subsequence.

Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.
Example 2:

Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.
Example 3:

Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.
 
 DP
 O(m*n) time 
 /*
s(i,j) from length text1 to length text2 
if s(i,j) true => s(i+1, j+1) = 1+ s(i,j)
if s(i,j) false => s(i+1, j+1) = max(s(i+1,j) ,s(i,j+1)) 
*/

class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int m = text1.length();
        int n = text2.length();
        
        int [][]dp = new int [m+1][n+1];
        
     
        for(int i = 0; i < m; i++ ){
            for(int j = 0; j < n; j++){
                if(text1.charAt(i) == text2.charAt(j)){
                    dp[i+1][j+1] = 1 + dp[i][j];                    
                }else{
                    dp[i+1][j+1] = Math.max(dp[i+1][j], dp[i][j+1]);
                }
            }
        }
        
        return dp[m][n];
    }
}

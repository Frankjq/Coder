Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.

Example 1:

Input: n = 12
Output: 3 
Explanation: 12 = 4 + 4 + 4.
Example 2:

Input: n = 13
Output: 2
Explanation: 13 = 4 + 9.



DP

/*
dp[i] = the least number of square numbers

dp[i] = min (dp[i-x])  + 1 ; x => square number
*/

class Solution {
    public int numSquares(int n) {
        int dp[] = new int [n+1];
        dp[0] = 0;
        for(int i = 1; i < dp.length; i++){
            dp[i] = dp[i-1];
            for(int j = 2 ; j *j <= i ; j ++){
                dp[i] = Math.min(dp[i-j*j], dp[i]);
            }
            dp[i] ++ ;
        }
        return dp[n];
    }
}


mathmatical

Legendre's three-square theorem
n = 4^a(8b + 7))

class Solution {
    public int numSquares(int n) {
        // 1 2 3 4
        if (isSqure(n)) {
            return 1;
        }
        int tem = n;
        while (tem % 4 == 0) {
            tem /= 4;
        }
        if (((tem - 7) % 8) == 0) {
            return 4;
        }
        for (int i = 0; i * i < n; i++) {
            if (isSqure(n - i * i)) {
                return 2;
            }
        }
        return 3;
    }
    private static boolean isSqure(int n) {
        int m = (int)Math.sqrt(n);
        return n == m * m;
    }
}

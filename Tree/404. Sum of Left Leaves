Find the sum of all left leaves in a given binary tree.

Example:

    3
   / \
  9  20
    /  \
   15   7

There are two left leaves in the binary tree, with values 9 and 15 respectively. Return 24.




solution one:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int sumOfLeftLeaves(TreeNode root) {
        int sum  = 0;
        List<Integer> list = new ArrayList<>();  
        helper(root, list, false);
        for(int i : list){
            sum += i;
        }
        return sum;
    }
    
    public void helper(TreeNode node,  List<Integer> list, boolean b){
        if(node == null) return;
        if(b == true){
            if(node.left == null && node.right == null) list.add(node.val);
        }
        helper(node.left, list, true);
        helper(node.right, list, false);
    }
}


improve, replace list with itself

 public int sumOfLeftLeaves(TreeNode root) {
      return helper(root, false);
  }
  public int helper(TreeNode node, boolean b){
      if (node == null) return 0;
      if(node.left == null && node.right == null){
          if(b){
              return node.val;
          }else{
              return 0;
          }
      }
      return helper(node.left, true) + helper(node.right, false);
  }
  

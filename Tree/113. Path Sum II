Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \    / \
7    2  5   1
Return:

[
   [5,4,11,2],
   [5,8,4,5]
]


better

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        helper(root, sum, 0, res,new ArrayList<Integer>());        
        return res;
    }
    public void helper(TreeNode node, int target, int cur, List<List<Integer>> res, List<Integer> list){
        if(node == null) return;
        
        if(node.left == null && node.right == null){         
            if (cur + node.val == target){
                list.add(node.val);
                res.add(new ArrayList<Integer>(list));
                list.remove(list.size()-1);
            }
        }
        
        list.add(node.val);
      
        helper(node.left, target, node.val + cur, res, list);
        helper(node.right, target, node.val + cur, res, list);
    
        list.remove(list.size()-1);***
    }
}

Given a binary tree, return the preorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,2,3]
前序遍历
中左右

Recursive:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> res  = new ArrayList<Integer>();       
        helper(root, res);
        return res;    
    }
    
    public void helper(TreeNode root, List<Integer> res){
        if(root == null) return;
        res.add(root.val);
        if(root.left != null) helper(root.left, res);
        if(root.right != null) helper(root.right, res);
    }
}


Iteration

public List<Integer> preorderTraversal(TreeNode root) {
    List<Integer> res  = new ArrayList<Integer>();
    Stack<TreeNode> stack = new Stack<>();
    TreeNode cur = root;

    while(cur != null || !stack.isEmpty()){
        if(cur != null){
            res.add(cur.val);
            stack.push(cur.right);
            stack.push(cur.left);
        }    
        cur = stack.pop();
    }
    return res;
}







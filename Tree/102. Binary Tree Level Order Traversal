Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]



Iteration:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();        
        if(root == null) return res;
        List<TreeNode> level = new ArrayList<>();
        level.add(root);
        
        while(!level.isEmpty()){
            List<TreeNode> nextlevel = new ArrayList<>();
            for(TreeNode a: level){
                if(a.left != null){
                    nextlevel.add(a.left);
                }
                if(a.right != null){
                    nextlevel.add(a.right);
                } 
            }
            List<Integer> value = new ArrayList<>();
            for(TreeNode i : level){
                value.add(i.val);
            }
            res.add(value);  
            level = nextlevel;
        }
        return res;
    }
}


improve data structure --> queue

  public List<List<Integer>> levelOrder(TreeNode root) {
      List<List<Integer>> res = new ArrayList<>();        
      if(root == null) return res;
      Queue<TreeNode> queue = new LinkedList<>();
      queue.offer(root);
      while (!queue.isEmpty()){
          int count = queue.size();
          List<Integer> level  = new ArrayList<>();
          while(count > 0){
              TreeNode node = queue.poll();
              level.add(node.val);
              if(node.left != null) queue.offer(node.left);
              if(node.right != null) queue.offer(node.right);
              count --;
          }
          res.add(level);
      }
      return res;
  }
  
  
  
Recursion:
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        helper(root, res, 0);
        return res;
    }
    
    public void helper(TreeNode node, List<List<Integer>> res, int level){
        if(node == null) return;
        if(level >= res.size()) res.add(new LinkedList<Integer>());
        
        res.get(level).add(node.val);
        helper(node.left, res, level+1);
        helper(node.right, res, level+1); 
    }

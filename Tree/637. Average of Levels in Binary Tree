Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.
Example 1:
Input:
    3
   / \
  9  20
    /  \
   15   7
Output: [3, 14.5, 11]
Explanation:
The average value of nodes on level 0 is 3,  on level 1 is 14.5, and on level 2 is 11. Hence return [3, 14.5, 11].



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Double> averageOfLevels(TreeNode root) {
        List<Double> list_sum = new ArrayList<>();
        List<Integer> list_count = new ArrayList<>();
        
        helper(root, list_sum, list_count, 0);

        List<Double> res = new ArrayList<>();
        for (int i = 0; i < list_sum.size(); i++){
            res.add((list_sum.get(i)/ list_count.get(i) ));
        }
        return res;
    }
    
    public void helper( TreeNode node,  List<Double> sum, List<Integer> count, int level){
        if(node == null) return;
        if(level >= sum.size()){
            sum.add(0 * 1.0);
            count.add(0);
        }
        
        sum.set(level, sum.get(level) + node.val);
        count.set(level, count.get(level) + 1);
        
        helper(node.left, sum, count, level+1);
        helper(node.right, sum, count, level+1);
    }   
}

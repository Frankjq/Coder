We have a list of points on the plane.  Find the K closest points to the origin (0, 0).


O(NlgN) time

class Solution {
    public int[][] kClosest(int[][] points, int K) {
        int [][] result = new int [K][2];
        
        int []dis = new int [points.length];
        for(int i = 0; i < points.length; i++){
            dis[i] = disPow(points[i]);         
        }
        Arrays.sort(dis);
        
        int distK = dis[K-1];
        
        for(int i =0, j=0; i< points.length; i++){
            if(distK >= disPow(points[i])){
                result[j] = points[i]; 
                j++;
            }
        }
        return result;
    }
    
    public int disPow(int []point){
        return point[0] * point[0]+  point[1]*point[1] ;
    }
    
}


priority queue
min heap


import java.util.PriorityQueue;
import java.util.Comparator;

public class kNearestPoint {
    public Point[] Solution(Point[] array, Point origin, int k) {
        Point[] rvalue = new Point[k];
        int index = 0;
        PriorityQueue<Point> pq = new PriorityQueue<Point> (k, new Comparator<Point> () {
            @Override
            public int compare(Point a, Point b) {
                return (int) (getDistance(a, origin) - getDistance(b, origin));
            }
        });
        
        for (int i = 0; i < array.length; i++) {
            pq.offer(array[i]);
            if (pq.size() > k)
                pq.poll();
        }
        while (!pq.isEmpty())
            rvalue[index++] = pq.poll();
        return rvalue;
    }
    private double getDistance(Point a, Point b) {
        return Math.sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
    }
}

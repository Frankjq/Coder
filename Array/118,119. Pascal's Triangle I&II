I.
Given a non-negative integer numRows, generate the first numRows of Pascal's triangle.
Input: 5
Output:
[
     [1],
    [1,1],
   [1,2,1],
  [1,3,3,1],
 [1,4,6,4,1]
]


class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>>  res = new ArrayList<List<Integer>>(numRows);
        
        for(int i = 0; i< numRows; i++){
            res.add(new ArrayList<Integer>());
            res.get(i).add(1);
            
            if(i > 1){
                for(int j = 1; j < res.get(i-1).size(); j++){
                    res.get(i).add(res.get(i-1).get(j) + res.get(i-1).get(j-1));
                }
            }
            
            if(i > 0){
                res.get(i).add(1);
            }
            
        }
        
        return res;
    }
}


  public List<List<Integer>> generate(int numRows) {
      List<List<Integer>>  res = new ArrayList<List<Integer>>();
       for(int i = 0; i< numRows; i++){
          res.add(new ArrayList<Integer>()); 
          res.get(i).add(1);

          if(i>0){
              int a = 1;
              for(int j=1; j<=i; j++){

                  a = (int)(a * (double)(i + 1 - j) /j );
                  res.get(i).add(a);
              }     
           }  
       }

      return res;
  }




II.
Given a non-negative index k where k â‰¤ 33, return the kth index row of the Pascal's triangle.

Note that the row index starts from 0.

Input: 3
Output: [1,3,3,1]


orignal:

  public List<Integer> getRow(int rowIndex) {
      List<Integer>  res = new ArrayList<Integer>();
      res.add(1);
      if(rowIndex == 0) return res;

      res.add(1);
      if(rowIndex == 1) return res;

      for(int i = 2 ; i < rowIndex+1; i++){
          List<Integer>  pre = res;
          res =  new ArrayList<Integer>();
          res.add(1);
          for(int j = 1; j < pre.size(); j ++){
              res.add(pre.get(j) + pre.get(j-1));                
          }
          res.add(1);
      }
      return res;
  }
  
  
  O(k) space
  
  repalce the last one and add one
  
  public List<Integer> getRow(int rowIndex) {
      List<Integer>  res = new ArrayList<Integer>();
      res.add(1);
      for(int i = 1; i < rowIndex + 1; i++){
          for(int j = i-1 ; j > 0; j--){
              res.set(j, res.get(j) + res.get(j-1));                
          }
          res.add(1);
      }
      return res;
  }
    
  
 from math: 
 
  class Solution {
    public List<Integer> getRow(int rowIndex) {
        
        List<Integer> res = new ArrayList<Integer>();
        
        res.add(1);
        int a = 1;
        
        for(int i=1; i<=rowIndex; i++){
            
            a = (int)(a * (double)(rowIndex + 1 - i) / i);
            res.add(a);
        }
     
        
        return res;
    }
}

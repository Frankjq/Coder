Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).

The replacement must be in-place and use only constant extra memory.

Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.

1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1



We need to find the first pair of two successive numbers a[i]a[i] and a[i-1]a[i−1], 
from the right, which satisfy a[i] > a[i-1]a[i]>a[i−1]. 
Now, no rearrangements to the right of a[i-1]a[i−1] can create a larger permutation 
since that subarray consists of numbers in descending order. 
Thus, we need to rearrange the numbers to the right of a[i-1]a[i−1] including itself.



find last max num from left
change i - 1 and b
swap and reserve

class Solution {
    public void nextPermutation(int[] nums) {
        if(nums.length < 2) return;
        int point = nums.length - 1;
        while(point > 0){
            if(nums[point] <= nums[point-1]) {
                point--;
            }else{
                break;
            }
        } 
  
        
        //swap
        if(point != 0){
            int chPoint = point;
            for(int i = point; i < nums.length ; i ++){
                if(nums[i] > nums[point-1]){
                    chPoint =  i;
                }
            }
            swap(point-1, chPoint, nums);
        } 
        
        //reserve
        for(int i = point; i < (nums.length + point )/2 ; i++){
            swap(i, nums.length - 1 -i + point, nums);
        }
        
        
    }
    
    public void swap(int a, int b, int [] nums){
        int temp = nums[a];
        nums[a] = nums[b];
        nums[b] = temp;
    }
}

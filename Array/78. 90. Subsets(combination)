set --- distinct

Given a set of distinct integers, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]



    1,  2,  3

0   1     2       3
[]  []    []      []
    [1]   [1]     [1]
          [2]     [2]
          [1,2]   [1,2]
                  [3]
                  [1,3]
                  [2,3]
                  [1,2,3]


O(2^n)

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res  = new ArrayList<>();
        res.add(new ArrayList<>());
        for (int i =  0 ;  i< nums.length ; i++){
            List<List<Integer>> temp  = new ArrayList<>();

            for(List<Integer> list : res){
                List<Integer> sub = new ArrayList<>(list);
                sub.add(nums[i]);
                temp.add(sub);
            }
            res.addAll(temp);
            
        }
        
        return res;
    }
}


backtrack
  
              []
[1]           [2]         [3]
[1,2] [1,3]   [2,3] 
[1,2,3]


  public List<List<Integer>> subsets(int[] nums) {
      List<List<Integer>> res = new ArrayList<>();

      res.add(new ArrayList<>());

      for(int i = 0; i < nums.length; i++)
          backTrack(res, new ArrayList<>(), nums ,i);

      return res;
  }


  public void backTrack(List<List<Integer>> res, List<Integer> temp, int[] nums, int index){
      List<Integer> sub = new ArrayList<>(temp);

      sub.add(nums[index]);

      res.add(sub);

      for(int i = index+1 ; i < nums.length; i++)
          backTrack(res, sub, nums, i);
  }
  
  

set --- duplicate

Given a collection of integers that might contain duplicates, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: [1,2,2]
Output:
[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]


backtrack

class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        res.add(new ArrayList<>());
        Arrays.sort(nums);
        
        for(int i = 0; i < nums.length; i++){
            if(i > 0 && nums[i] == nums[i-1]) {
                continue;
            }
            backTrack(res, new ArrayList<>(), nums, i);
        }
        return res;
    }
    
    public void backTrack(List<List<Integer>> res, List<Integer> temp, int[] nums, int index){
        List<Integer> sub  = new ArrayList<>(temp);
        sub.add(nums[index]);
        res.add(sub);
        
        for(int i = index + 1 ; i < nums.length; i++){
            if(i > index + 1 && nums[i] == nums[i-1]) {/*****/
                continue;
            }           
            backTrack(res, sub, nums, i);
        }
    }
}



77. Combinations

Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

Example:

Input: n = 4, k = 2
Output:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> res = new ArrayList<>();
        
        backTrack(res, new ArrayList<>(), 1, n, k);
        
        return res;
    }
    
    public void backTrack( List<List<Integer>> res, List<Integer> temp, int index, int n, int k){
         if(k == 0) {
            res.add(new ArrayList<>(temp));
            return;
        }
        
        for(int i = index; i <= n; i ++){
            // List<Integer> sub = new ArrayList<>(temp);
            temp.add(i);
            backTrack(res, temp , i+1, n, k-1 );
            temp.remove(temp.size()-1);
        }
    }
}


39. Combination Sum

Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]
Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]

class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(candidates);
        backTrack(res, new ArrayList<>(), 0, candidates, target);
        return res;
    }
    public void backTrack(List<List<Integer>> res, List<Integer> temp, int index ,int [] candidates, int target){
        if(target < 0) return;
        else if (target == 0) {
            res.add(new ArrayList<>(temp));
            return;
        }
        
        for(int i = index; i < candidates.length ; i ++){
            temp.add(candidates[i]);
            backTrack(res, temp, i , candidates, target - candidates[i]);
            temp.remove(temp.size()-1);
        }
        
    }
}








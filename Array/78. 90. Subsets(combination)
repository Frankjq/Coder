set --- distinct

Given a set of distinct integers, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]



    1,  2,  3

0   1     2       3
[]  []    []      []
    [1]   [1]     [1]
          [2]     [2]
          [1,2]   [1,2]
                  [3]
                  [1,3]
                  [2,3]
                  [1,2,3]


O(2^n)

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res  = new ArrayList<>();
        res.add(new ArrayList<>());
        for (int i =  0 ;  i< nums.length ; i++){
            List<List<Integer>> temp  = new ArrayList<>();

            for(List<Integer> list : res){
                List<Integer> sub = new ArrayList<>(list);
                sub.add(nums[i]);
                temp.add(sub);
            }
            res.addAll(temp);
            
        }
        
        return res;
    }
}


backtrack
  
              []
[1]           [2]         [3]
[1,2] [1,3]   [2,3] 
[1,2,3]


  public List<List<Integer>> subsets(int[] nums) {
      List<List<Integer>> res = new ArrayList<>();

      res.add(new ArrayList<>());

      for(int i = 0; i < nums.length; i++)
          backTrack(res, new ArrayList<>(), nums ,i);

      return res;
  }


  public void backTrack(List<List<Integer>> res, List<Integer> temp, int[] nums, int index){
      List<Integer> sub = new ArrayList<>(temp);

      sub.add(nums[index]);

      res.add(sub);

      for(int i = index+1 ; i < nums.length; i++)
          backTrack(res, sub, nums, i);
  }
  
  

set --- duplicate

Given a collection of integers that might contain duplicates, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: [1,2,2]
Output:
[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]


backtrack

class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        res.add(new ArrayList<>());
        Arrays.sort(nums);
        
        for(int i = 0; i < nums.length; i++){
            if(i > 0 && nums[i] == nums[i-1]) {
                continue;
            }
            backTrack(res, new ArrayList<>(), nums, i);
        }
        return res;
    }
    
    public void backTrack(List<List<Integer>> res, List<Integer> temp, int[] nums, int index){
        List<Integer> sub  = new ArrayList<>(temp);
        sub.add(nums[index]);
        res.add(sub);
        
        for(int i = index + 1 ; i < nums.length; i++){
            if(i > index + 1 && nums[i] == nums[i-1]) {/*****/
                continue;
            }           
            backTrack(res, sub, nums, i);
        }
    }
}


46. Permutations

Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

backtrack

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        backTrack(res, new ArrayList<>(), nums);
        return res;
    }
    
    public void backTrack(List<List<Integer>> res, List<Integer> temp, int [] nums){
        if(temp.size() == nums.length) res.add(new ArrayList<>(temp));
        
        for(int i = 0; i < nums.length; i++){
            if(temp.contains(nums[i])) continue;
            temp.add(nums[i]);
            backTrack(res, temp, nums);
            temp.remove(temp.size()-1);
       }
        
    }
}


47. Permutations II
Given a collection of numbers that might contain duplicates, return all possible unique permutations.

Example:

Input: [1,1,2]
Output:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]


class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        boolean [] used = new boolean [nums.length];
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
    
        backTrack(res, new ArrayList<>(), used, nums);
        
        return res;
    }
    
    public void backTrack(List<List<Integer>> res, List<Integer> temp, boolean [] used, int [] nums){
        if(temp.size() == nums.length){
            res.add(new ArrayList<>(temp));
            return;
        }
        
        for(int i = 0; i < nums.length; i++){
            if(used[i] || i > 0 && nums[i] == nums[i-1] && !used[i-1] ) continue;
            
            temp.add(nums[i]);
            used[i] = true;
            backTrack(res, temp, used, nums);
            temp.remove(temp.size()-1);
            used[i] = false;
        }
    }
}


77. Combinations

Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

Example:

Input: n = 4, k = 2
Output:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> res = new ArrayList<>();
        
        backTrack(res, new ArrayList<>(), 1, n, k);
        
        return res;
    }
    
    public void backTrack( List<List<Integer>> res, List<Integer> temp, int index, int n, int k){
         if(k == 0) {
            res.add(new ArrayList<>(temp));
            return;
        }
        
        for(int i = index; i <= n; i ++){
            // List<Integer> sub = new ArrayList<>(temp);
            temp.add(i);
            backTrack(res, temp , i+1, n, k-1 );
            temp.remove(temp.size()-1);
        }
    }
}


39. Combination Sum

Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]
Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]

class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(candidates);
        backTrack(res, new ArrayList<>(), 0, candidates, target);
        return res;
    }
    public void backTrack(List<List<Integer>> res, List<Integer> temp, int index ,int [] candidates, int target){
        if(target < 0) return;
        else if (target == 0) {
            res.add(new ArrayList<>(temp));
            return;
        }
        
        for(int i = index; i < candidates.length ; i ++){
            temp.add(candidates[i]);
            backTrack(res, temp, i , candidates, target - candidates[i]);
            temp.remove(temp.size()-1);
        }
        
    }
}


40. Combination Sum II

Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

Each number in candidates may only be used once in the combination.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8,
A solution set is:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]


class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(candidates);
        
        backTrack(res, new ArrayList<>(), 0, candidates, target);
        return res;
    }
    
    public void backTrack(List<List<Integer>> res, List<Integer> temp, int index, int [] candidates, int target){
        if(target < 0) return;
        else if( target == 0){
            res.add( new ArrayList<>(temp) );
            return;
        }
        
        for(int i = index; i < candidates.length; i++){
            if(i > index  && candidates[i] == candidates[i-1]) continue;
            temp.add(candidates[i]);
            backTrack(res, temp, i + 1, candidates, target - candidates[i]);
            temp.remove(temp.size()-1);
        }
        
    }
} 



216. Combination Sum III

Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

Note:

All numbers will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]


class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> res = new ArrayList<>();
        backTrack(res, new ArrayList<>(), 1, k , n);
        return res;   
    }
    
    public void backTrack(List<List<Integer>> res, List<Integer> temp, int index, int num, int target){
        if(num == 0 && target == 0){
            res.add(new ArrayList<>(temp));
            return;
        }else if(target < 0 || num < 0 ) return;
        
        for(int i = index ; i < 10 ; i ++){
            temp.add(i);
            backTrack(res, temp, i+1, num -1 , target - i );
            temp.remove(temp.size()-1);
        }
    }
}


377. Combination Sum IV

dp is better

// class Solution {
//     int count = 0;

//     public int combinationSum4(int[] nums, int target) {
//         backTrack( nums, target);
//         return count;
//     }
    
//     public void backTrack(int [] nums, int target){
//         if(target < 0) return;
//         if(target == 0){
//             count ++;
//             return; 
//         }
        
//         for(int i = 0; i < nums.length; i ++){
//             backTrack(nums, target - nums[i]);
//         }
//     }
// }

class Solution {
    public int combinationSum4(int[] nums, int target) {
        int res [] = new int [target +1];
        res[0] = 0;
        for(int i = 1; i < res.length; i ++){
            for(int x : nums){
                if(i == x ){
                    res[i] ++;
                }else if(i > x){
                    res[i] += res[i-x];
                }
            }
        }
        return res[target];
    }
}




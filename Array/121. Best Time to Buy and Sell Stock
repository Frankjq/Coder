Say you have an array for which the ith element is the price of a given stock on day i.
If you were only permitted to complete at most one transaction 
(i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.
Note that you cannot sell a stock before you buy one.


find max profit by one transcation
Time Complexity : O(n) 
two points, low and high points

class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length < 2){
            return 0;
        }
        int low = prices[0];
        int high = prices[0];
        int res = high - low;
        
        for(int a : prices){
            if (a < low){
                low = a;
                high = a;
                continue;
            }
            if (a > high){
                high = a;
                if(res < (high-low)){
                    res = high -low;
                }
            }
        }
        return res;
    }
}



Say you have an array for which the ith element is the price of a given stock on day i.
Design an algorithm to find the maximum profit. You may complete as many transactions as you like 
(i.e., buy one and sell one share of the stock multiple times).
Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).


find maximun profit 

time complexity O(n)

method: dp 
      OPT(i): current max profit
class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length < 2) return 0;        
        int dp[] = new int [prices.length];
        dp[0] = 0;
        
        for(int i = 1 ; i < dp.length; i++){
            int max = 0;
            if(prices[i] > prices[i-1]){
                max = dp[i-1] + prices[i] - prices[i-1];
            }else{
                max = dp[i-1];
            }   
            dp[i] = max;      
        }
        return dp[prices.length-1];
    }
}


method:valley and peek

class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length < 2) return 0;
        int i = 0;
        int valley = prices[0];
        int peak = prices[0];
        int maxprofit = 0;
        while (i < prices.length - 1) {
            while (i < prices.length - 1 && prices[i] >= prices[i + 1])
                i++;
            valley = prices[i];
            while (i < prices.length - 1 && prices[i] <= prices[i + 1])
                i++;
            peak = prices[i];
            maxprofit += peak - valley;
        }
        return maxprofit;
    }
}

Given a singly linked list, determine if it is a palindrome.

list 

two points >> fast and slow

1   2   3   2   1 
s   f

1   2   3   2   1
    s       f
    
1   2   3   2   1   null
        s            f
 
 
1   2   3   3   2   1
s   f 
1   2   3   3   2   1
    s       f
1   2   3   3   2   1    null 
        s           f   
    
 
O(n) time and O(1) space

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    
     public ListNode reverse(ListNode head){
        ListNode pre = null;        
        while(head != null){
            ListNode next = head.next;
            head.next = pre;
            pre = head;
            head = next;            
        }
        return pre;
    }
       
    public boolean isPalindrome(ListNode head) {
        if (head == null || head.next == null) return true;
        
        ListNode slow = head, fast = head.next;
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }     
        if(fast != null) slow = slow.next;
        
        slow = reverse(slow);
        fast = head;
        
        while ( slow != null ){
           if(fast.val != slow.val)  return false;
           
           fast = fast.next;
           slow = slow.next;       
        }
        return true;
    }
}

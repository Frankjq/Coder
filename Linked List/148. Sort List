Sort a linked list in O(n log n) time using constant space complexity.

sort list in linked list

merge sort

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }
           
        ListNode slow = head , fast = head.next;
        // split into two parts
        while(fast.next != null &&  fast.next.next != null ){    
            slow = slow.next;
            fast = fast.next.next;  
        }
        
        ListNode slowNext = slow;
        slow = slow.next;
        slowNext.next = null;
        
        // continue to split
        ListNode l1 = sortList(head);
        ListNode l2 = sortList(slow);
        
        // merge two parts
        return  merge(l1, l2);
        
    }
    
    public ListNode  merge(ListNode l1, ListNode l2){
        ListNode prehead = new ListNode(0); 
        ListNode p = prehead;
        while(l1 != null && l2 != null){
            if(l1.val < l2.val){
                p.next = l1;          
                l1 = l1.next;
            }else{
                p.next = l2;
                l2 = l2.next;
            }
            p= p.next;
        }
        
        if(l1 != null){
            p.next = l1;
        }
        
        if(l2 != null){
            p.next = l2;
        }
        return prehead.next;
    }
    
}

Given a singly linked list, group all odd nodes together followed by the even nodes. 
Please note here we are talking about the node number and not the value in the nodes.

num node -> 1 - 2 - 3 - 4 - 5 - 6 - 7
            1 , 3 , 5 , 7 . 2 , 4 , 6
            
            1,2,3,4
            1,3,2,4
            

 O(1) space complexity and O(nodes) time complexity.
 
 loop nodes once
 
 *****
 attention:  
 head.next would change when change odd and even. it should save in another point
 focus on 1+2 nodes
 *****
 
 
 /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode oddEvenList(ListNode head) {
        if (head == null || head.next == null) return head;
        ListNode odd = head;
        ListNode even = head.next;
        ListNode evenHead = even;
        
        while(odd != null || even != null){        
            if(even.next == null){
                odd.next =evenHead;
                //even.next = null;
                break;
            }else{
                odd.next = even.next;
                odd = even.next;                
            }
        
            if(odd.next == null){
                odd.next = evenHead;
                even.next = null;
                break;
            }else{
                even.next = odd.next;
                even = odd.next; 
            }
        }          
        return head;
    }
}



simple--

class Solution {
    public ListNode oddEvenList(ListNode head) {
        if (head == null || head.next == null) return head;
        
        ListNode odd = head;
        ListNode even = head.next;
        ListNode evenHead = even;
        
        while(even != null && even.next != null){
            odd.next = even.next;
            odd = even.next;   
            even.next = odd.next;
            even = odd.next;
        }
        odd.next = evenHead;
        return head;
    }
}

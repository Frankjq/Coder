Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.

delete

copy nodes

previous node >> current node >> same node >>  next node >> nn node
previous node >> next node >> same node >>  next node >> nn node
previous node >> next node  >> nn node

can't solve head and tail nodes

focus on three nodes 

A A A >> follow two condition 
A A B >> next
A A / >> end 

A B C 
A B B B
A B B C


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if (head == null || head.next == null ) return head;
        
        while(head.val == head.next.val){
            if (head.next.next  == null) return null;
            if (head.next.next.val == head.next.val){
                head.next = head.next.next;
            }else{
                head = head.next.next;
                 if(head.next == null) return head;
            }
        }
        
        ListNode point = head;  
        while (point.next.next != null){                
            while(point.next.val == point.next.next.val ){
                if (point.next.next.next == null) {
                    point.next = null;
                   return head;
                }
                if(point.next.next.val == point.next.next.next.val ){
                   point.next.next = point.next.next.next;
               }else{
                   point.next = point.next.next.next;
                    if(point.next.next == null) return head;
               }
            }          
            point = point.next;               
        }      
        return head;
    }
}


class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if (head == null) return null;
   
        ListNode cur = head,next = head.next,prev = null;
        while (next != null) {
            if (cur.val != next.val) {
                prev = cur;
                cur = cur.next;
                next = next.next;
            } else {
                while (next != null && next.val == cur.val)
                    next = next.next;
                
                if (next != null) {
                   cur.val = next.val;
                   cur.next = next.next;
                   next = next.next;
                } else {
                   if (prev == null)
                       head = null;
                   else
                       prev.next = null;
                }
            }  
        }
        
        return head;
    }
}





